@model CateringService.Models.AdminDashboardViewModel
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Catering Admin Dashboard";
}

<!-- Дополнительные стили для более приятного внешнего вида -->
<style>
    body {
        background-color: #f2f5f7;
        color: #343a40;
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    }

    .card {
        border: none;
        border-radius: 0.75rem;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin-bottom: 1.5rem;
    }

    .card-header {
        background: #007bff;
        color: #fff;
        font-size: 1.1rem;
        border-top-left-radius: 0.75rem;
        border-top-right-radius: 0.75rem;
    }

    .card-body {
        background: #fff;
        border-bottom-left-radius: 0.75rem;
        border-bottom-right-radius: 0.75rem;
        padding: 1.5rem;
    }

    h2, .h2 {
        margin-top: 1rem;
        margin-bottom: 1rem;
        text-align: center;
    }

    .list-group-item {
        font-size: 0.95rem;
    }

    .table th, .table td {
        vertical-align: middle;
        text-align: center;
    }
    /* Стили для кнопок внутри таблицы */
    .removeRow {
        font-size: 0.8rem;
    }
    /* Форма AJAX */
    #cateringRequestForm .btn-primary {
        margin-top: 1rem;
    }
    /* Статичная высота для таблицы транспорта, если хотите скролл
        .table-responsive {
            max-height: 400px;
            overflow-y: auto;
        }
        */
</style>

<div class="container mt-4">
    <h2 class="mb-4">Catering Admin Dashboard</h2>

    <!-- Сообщения и ошибки (из TempData) -->
    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success">@TempData["Message"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <!-- Верхняя панель: режим, вместимость, типы питания -->
    <div class="row">
        <!-- Режим общения -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">Communication Mode</div>
                <div class="card-body">
                    <form method="post">
                        <input type="hidden" name="actionType" value="ToggleCommMode" />
                        <div class="form-group">
                            <label>Use Mock?</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="useMock" id="useMockTrue" value="true" @(ViewBag.UseMock == true ? "checked" : "")>
                                <label class="form-check-label" for="useMockTrue">Yes (Mock)</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="useMock" id="useMockFalse" value="false" @(ViewBag.UseMock == false ? "checked" : "")>
                                <label class="form-check-label" for="useMockFalse">No (Real)</label>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Set Mode</button>
                    </form>
                </div>
            </div>
        </div>
        <!-- Вместимость транспортного средства -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">Vehicle Capacity</div>
                <div class="card-body">
                    <p>Current capacity: <strong>@Model.Capacity.Capacity</strong></p>
                    <form method="post">
                        <input type="hidden" name="actionType" value="UpdateCapacity" />
                        <div class="form-group">
                            <label for="newCapacity">New Capacity</label>
                            <input type="number" class="form-control" name="newCapacity" id="newCapacity" step="0.1" required />
                        </div>
                        <button type="submit" class="btn btn-primary mt-2">Update Capacity</button>
                    </form>
                </div>
            </div>
        </div>
        <!-- Типы питания -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">Meal Types</div>
                <div class="card-body">
                    <ul class="list-group mb-3">
                        @foreach (var meal in Model.MealTypes.MealTypes)
                        {
                            <li class="list-group-item">@meal</li>
                        }
                    </ul>
                    <form method="post">
                        <input type="hidden" name="actionType" value="UpdateMealTypes" />
                        <div class="form-group">
                            <label for="mealTypesJson">Update List (JSON)</label>
                            <textarea class="form-control" name="mealTypesJson" id="mealTypesJson" rows="3" required>@ViewBag.MealTypesJson</textarea>
                        </div>
                        <button type="submit" class="btn btn-primary mt-2">Update Meal Types</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Карточка для запроса кейтеринга -->
    <div class="card">
        <div class="card-header">Create Catering Request</div>
        <div class="card-body">
            <form id="cateringRequestForm">
                <input type="hidden" name="actionType" value="RequestCatering" />
                <div class="form-group">
                    <label for="aircraftId">Aircraft ID</label>
                    <input type="text" class="form-control" name="aircraftId" id="aircraftId" placeholder="e.g. AIRBUS123" required />
                </div>
                <div class="form-group">
                    <label for="nodeId">Node ID (optional)</label>
                    <input type="text" class="form-control" name="nodeId" id="nodeId" placeholder="e.g. NODE-XYZ" />
                </div>

                <div class="form-group mt-4">
                    <label>Meal Orders</label>
                    <table class="table" id="mealOrdersTable">
                        <thead class="thead-light">
                            <tr>
                                <th>Meal Type</th>
                                <th>Quantity</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <select class="form-control" name="mealType">
                                        @foreach (var meal in Model.MealTypes.MealTypes)
                                        {
                                            <option value="@meal">@meal</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <input type="number" class="form-control" name="mealCount" value="0" min="0" required />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm removeRow">Delete</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <button type="button" class="btn btn-secondary" id="addMealOrder">Add Order</button>
                </div>

                <button type="submit" class="btn btn-primary">Send Catering Request</button>
            </form>
        </div>
    </div>

    <!-- Карточка статуса транспортных средств -->
    <div class="card mt-4">
        <div class="card-header">Vehicles Status (Real-Time Updates)</div>
        <div class="card-body">
            <table class="table table-bordered" id="vehiclesTable">
                <thead class="thead-light">
                    <tr>
                        <th>Vehicle ID</th>
                        <th>Base Node</th>
                        <th>Status</th>
                        <th>Service Spots</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var vehicle in Model.Vehicles)
                    {
                        <tr>
                            <td>@vehicle.VehicleId</td>
                            <td>@vehicle.BaseNode</td>
                            <td>@vehicle.Status</td>
                            <td>
                                @if (vehicle.ServiceSpots != null && vehicle.ServiceSpots.Count > 0)
                                {
                                    <ul class="m-0 p-0" style="list-style: none;">
                                        @foreach (var spot in vehicle.ServiceSpots)
                                        {
                                            <li>@spot.Key : @spot.Value</li>
                                        }
                                    </ul>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Подключение jQuery, SignalR и дополнительного JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        // Добавление новой строки заказа
        $("#addMealOrder").click(function () {
            let newRow = `<tr>
                    <td>
                        <select class="form-control" name="mealType">
    @foreach (var meal in Model.MealTypes.MealTypes)
    {
                                    <option value="@meal">@meal</option>
    }
                        </select>
                    </td>
                    <td>
                        <input type="number" class="form-control" name="mealCount" value="0" min="0" required />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm removeRow">Delete</button>
                    </td>
                </tr>`;
            $("#mealOrdersTable tbody").append(newRow);
        });

        // Удаление строки
        $(document).on("click", ".removeRow", function () {
            $(this).closest("tr").remove();
        });

        // AJAX-отправка формы "Send Catering Request"
        $("#cateringRequestForm").submit(function (e) {
            e.preventDefault();
            // Собираем данные из таблицы заказов
            let orders = [];
            $("#mealOrdersTable tbody tr").each(function () {
                let mealType = $(this).find("select[name='mealType']").val();
                let mealCount = $(this).find("input[name='mealCount']").val();
                orders.push({ MealType: mealType, Count: parseInt(mealCount) });
            });
            let data = {
                actionType: "RequestCatering",
                aircraftId: $("#aircraftId").val(),
                nodeId: $("#nodeId").val(),
                mealsJson: JSON.stringify(orders)
            };
            $.ajax({
                type: "POST",
                url: "/Admin/Index",
                data: data,
                headers: { "X-Requested-With": "XMLHttpRequest" },
                success: function (response) {
                    alert(response.message);
                },
                error: function (xhr) {
                    alert("Error: " + xhr.responseText);
                }
            });
        });
    });

    // Подключаемся к SignalR-хабу для обновления статусов транспорта в реальном времени
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/vehiclestatushub")
        .build();

    connection.on("ReceiveVehicleUpdate", function (vehicles) {
        const tbody = document.getElementById("vehiclesTable").getElementsByTagName("tbody")[0];
        tbody.innerHTML = "";
        vehicles.forEach(function (vehicle) {
            let row = tbody.insertRow();
            row.insertCell(0).innerText = vehicle.vehicleId;
            row.insertCell(1).innerText = vehicle.baseNode;
            row.insertCell(2).innerText = vehicle.status;
            let cellSpots = row.insertCell(3);
            if (vehicle.serviceSpots) {
                let spots = "";
                for (let key in vehicle.serviceSpots) {
                    spots += `${key} : ${vehicle.serviceSpots[key]}\n`;
                }
                cellSpots.innerText = spots;
            }
        });
    });

    connection.start().then(function () {
        console.log("Connected to VehicleStatusHub");
    }).catch(function (err) {
        console.error(err.toString());
    });
</script>
